static function getPage(query) {
    /*console.log(Object.keys(globalThis))
    console.log("globalThis.global")
    console.log(globalThis.global)
    console.log("globalThis.MarkoRun")
    console.log(globalThis.MarkoRun.route)
    console.log("globalThis.Marko")
    console.log(globalThis.Marko.Component)
    console.log("global")
    console.log(global.global)
    console.log("global.MarkoRun.route")
    console.log(global.MarkoRun.route)
    if (!query || !query.includes("page")) return 1;
    return +query.split("=")[1];*/
    //console.log("query");
    //console.log(query.URLSearchParams) // undefined
    //console.log(query.URLSearchParams["page"]) // cannot read properties of undefined
    //console.log(query.URLSearchParams.page) // cannot read properties of undefined
    //console.log(query.page) // undefined
    //console.log(Object.getOwnPropertyNames(query)); // []
    //console.log(typeof(query))
    //const obj = query
    //console.log(Object.keys(obj)) // []
    /*console.log(query.entries())
        console.log(query.keys())
        console.log(query.get('page'))*/
    /*let result = "";
        for (const i in query) {
            // Object.hasOwn() is used to exclude properties from the object's
            // prototype chain and only show "own properties"
            if (Object.hasOwn(query, i)) {
                result += `${objName}.${i} = ${query[i]}\n`;
            }
        }
        console.log(result);*/
    const page = query.get("page")
    if (!page) return 1;
    return +page
}
//$ console.log($global.url.search)

$ console.log($global.url)

$ const page = getPage($global.url.searchParams);
//$ console.log(page)
$ const test = "Test";
$ const name = input;
//$ console.log(input)


<div class="container">
    <main>
        <a href=`?page=${page + 1}`>
            Next page (${page})
        </a>
        <p>
            test ${test}
            <br>
             name ${Object.keys(name)}
            <br>
             Test2 ${"Test2"}
            <br>
             input.$name ${input.$name}
            <br>
             //component ${Object.keys(component)}
            <br>
             this ${this}
            <br>
             name.$global ${name.$global}
            <br>
             //$global = ${Object.keys($global)}
            <br>
             //$global.url ${$global.url}
            <br>
             //$global.params ${Object.keys($global.params)}
            <br>
             $global.params.name ${$global.params.name}
        </p>
    </main>
</div>

style {
    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        font-size: clamp(1em, 2vw, 2em);
        padding: 1em;
        box-sizing: border-box;
        height: 100%;
        width: 100%;
    }
    img.logo {
        width: 12em;
    }
}
